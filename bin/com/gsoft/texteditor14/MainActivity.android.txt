package com.gsoft.texteditor14;

import java.io.File;

import android.os.Bundle;
import android.os.Environment;
import android.app.Activity;
import android.content.Context;
import android.content.pm.PackageInfo;
import android.content.res.Resources;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;

import android.view.KeyEvent;
import android.view.Window;
import android.view.WindowManager;

import com.gsoft.common.Notification;
import com.gsoft.common.PowerManagement;
import com.gsoft.common.Compiler.CompilerHelper;
import com.gsoft.common.Util;
import com.gsoft.common.gui.Control;
import com.gsoft.common.gui.IntegrationKeyboard.HardwareKeyboard;
import com.gsoft.texteditor14.R;
import com.gsoft.texteditor14.R.string;

public class MainActivity extends Activity implements SensorEventListener  {
	CustomView mView;
	
	SensorManager mSensorManager;
	
	String title;

	private float[] sensorValues;
	//Sensor sensorGravity;

	private Sensor mAccelerometer;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		
		
		
		Control.activity = this;
		
		Control.window = getWindow(); 
		PowerManagement.keepScreenOn();
		requestWindowFeature(Window.FEATURE_NO_TITLE);
		Control.window.setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
				WindowManager.LayoutParams.FLAG_FULLSCREEN);
		
		Context context = getApplicationContext();
		try {			
			Resources res = context.getResources();
	        PackageInfo packageInfo = context.getPackageManager().getPackageInfo(this.getClass().getPackage().getName(), 0);
	        title = res.getString(R.string.app_name) + " " + packageInfo.versionName;
	        this.setTitle(title);
        }
        catch (Exception e) {
        	
        }
		mView = new CustomView(this,context);
		setContentView(mView);
		
		mView.restoreContents();
		
		//Notification.notifyApp(this, title);
		try{
		com.purplebrain.adbuddiz.sdk.AdBuddiz.setPublisherKey("e6f6f0b8-b8ae-417f-92fe-471f6fd821ce");	
		com.purplebrain.adbuddiz.sdk.AdBuddiz.cacheAds(this); // this = current Activity
		
		if (com.purplebrain.adbuddiz.sdk.AdBuddiz.isReadyToShowAd(this)) { // this = current Activity
			com.purplebrain.adbuddiz.sdk.AdBuddiz.showAd(this); // this = current Activity
		}
		}catch(Exception e) {
			e.printStackTrace();
		}
		
		/*try {
		mSensorManager = (SensorManager)getSystemService(SENSOR_SERVICE);
		//sensorGravity = mSensorManager.getDefaultSensor(Sensor.TYPE_GRAVITY);
		mAccelerometer = mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER); 
		}catch(Exception e) {
    		e.printStackTrace();
    		Control.showMessageToFile((new com.gsoft.common.Util.StackTracer(e)).getMessage().str);
    	}*/
		
	}
	
	/*public void onBackPressed() {
		mView.onBackPressed();
		mView.invalidate();
	}*/
	
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		if (event.getAction()==KeyEvent.ACTION_DOWN) {
	        if (keyCode == KeyEvent.KEYCODE_BACK) {
	            // When the user center presses, let them pick a contact.
	        	mView.onBackPressed();
	        	//mView.closeDialog.open();
	        	//Control.setModified(true);
	        	mView.invalidate();
	            return true;
	        }
	        
	       		
			HardwareKeyboard hardwareKeyboard = new HardwareKeyboard(keyCode, event);
			Control.keyboard.onTouchEvent(hardwareKeyboard, null);
			mView.invalidate();
			return true;
		}
		return false;
    }
		
	
	
	
	/**app이 실행을 멈추고 실행을 재개할 때 호출된다.*/
	protected void onResume() {
		super.onResume();
		/*try{
		if (mSensorManager!=null && mAccelerometer!=null)
			mSensorManager.registerListener(this, this.mAccelerometer, SensorManager.SENSOR_DELAY_NORMAL);
		}catch(Exception e) {
    		e.printStackTrace();
    		Control.showMessageToFile((new com.gsoft.common.Util.StackTracer(e)).getMessage().str);
    	}*/
		mView.resume();		
	}

	/**app이 실행을 멈출 때 호출된다. 예를 들어 home버튼 눌릴 시*/
    protected void onPause() {
    	super.onPause();
    	//Control.exit(true);
    	mView.pause();
    	/*try{
    	if (mSensorManager!=null && mAccelerometer!=null)
    		mSensorManager.unregisterListener(this); 
	    }catch(Exception e) {
			e.printStackTrace();
			Control.showMessageToFile((new com.gsoft.common.Util.StackTracer(e)).getMessage().str);
		}*/
    	
    }
    
    /*protected void onSaveInstanceState(Bundle outState) {
    	mView.backupContents();
    }*/
    
    public void destroy() {
    	String appName = this.getClass().getPackage().getName();
    	try{
    		/*try{
    		Runtime.getRuntime().exec(appName, null, null);
    		}catch(Exception e) {
    			
    		}*/
    		
    	if (isFinishing()==false) {  // 여기서 finish()를 안하고 종료하므로 backupText()에 의한 저장을 해야 한다.
			mView.destroyExceptNotify();
			super.onDestroy();
			int myPId = android.os.Process.myPid();
			android.os.Process.killProcess(myPId);
			//System.exit(0);
					
			//String appName = this.getClass().getPackage().getName();
			//Process process = Runtime.getRuntime().exec(appName, null, null);
			android.os.Process p = new android.os.Process();
			
		}
		else {	// finish called.
			if (Control.isDestroyedExceptNotify) {
				mView.destroyExceptNotify();
				super.onDestroy();
				//System.exit(0);
				
				int myPId = android.os.Process.myPid();
				android.os.Process.killProcess(myPId);
				
			}
			else {
				mView.destroy();
				super.onDestroy();
				//System.exit(0);
				
				int myPId = android.os.Process.myPid();
				android.os.Process.killProcess(myPId);
				
			}
		}
    	
    	}catch(Exception e) {
    		e.printStackTrace();
    		Control.showMessageToFile((new com.gsoft.common.Util.StackTracer(e)).getMessage().str);
    	}
    }
  
	protected void onDestroy() {
		destroy();
		
	}

	@Override
	public void onAccuracyChanged(Sensor arg0, int arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void onSensorChanged(SensorEvent event) {
		// TODO Auto-generated method stub
		/*try{
		if (sensorValues==null) {
			sensorValues = new float[3];
		}
		sensorValues[0] = event.values[0];
		sensorValues[1] = event.values[1];
		sensorValues[2] = event.values[2];
		if (Control.loggingForMessageBox!=null) {
			Control.loggingForMessageBox.setText(true, 
					sensorValues[0] + "-" + sensorValues[1] + "-" + sensorValues[2], false);
			Control.loggingForMessageBox.setHides(false);
			mView.invalidate();
		}
		}catch(Exception e) {
    		e.printStackTrace();
    		Control.showMessageToFile(e.getMessage());
    	}*/
	}


}
